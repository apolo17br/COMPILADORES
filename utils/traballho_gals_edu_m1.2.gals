#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions
IGNORAR: [\t\r\s]+|(#.*\n)|[#][!][#-~\n\r\s\t\b]+[!][#]*
IDENTIFICADOR: [a-zA-Z_][a-zA-Z0-9_]*
//DIGITO: [0-9]
BITS: [0-1] //nao usado
ESPACOS: [\ \t\n\r] //nao usado
BARRA: ["/"]
ASPA_SIMPLES: ["'"]
COMENTARIO: {BARRA}{BARRA}[^\n\r]*
ASTERISCO: ["*"]
COMENTARIOCOMPOSTO: {BARRA}[\*]([^\*]|[\r\n]|([\*]+([^\*/]|[\r\n])))*[\*]{BARRA}
INT: [0-9]+
FLOAT: [0-9]*\.[0-9]+
BOOLEAN: true | TRUE | false | FALSE
BINARIO: 0b[0-1]+
HEXA: 0x[0-9a-fA-F]+
STRING: \"[^\"]*\"
CHAR: '[^']'
#Tokens
//GERAL
: {IGNORAR} //necessário para identificar quebras de linha, etc.
QUEBRA_LINHA: \n
//ID : {LETRA}({LETRA}*|{DIGITO}|_)* //uma letra seguida de qualquer char ou digito ou underline
VARIAVEL: "$"{IDENTIFICADOR}
CONSTANTE: "&"{IDENTIFICADOR}


//COMENTARIOS
COMENTARIO_SIMPLES: {COMENTARIO}
COMENTARIO_COMPOSTO: {COMENTARIOCOMPOSTO}


//VALORES CONSTANTES
BINARIO: {BINARIO} //0b1001001
INTEIRO: {INT} //1001
HEXADECIMAL: {HEXA} //0x1001A1C0
FLOAT: {FLOAT} //1.1
STRING: {STRING} //"teste"
CHAR: {CHAR} //'a'
BOOLEAN: {BOOLEAN} //true ou falso


//PALAVRAS-CHAVE OU RESERVADAS
SE: "if"
ENTAO: "then" //nao usado
SENAO: "else"
SENAOSE: "elsif"
ENQUANTO: "while"
PARA: "for"
IN: "in"
ABRANGENCIA: "@abrangencia"
FIM_LOOP: "endwhile" //nao usado
FACA: "do"
ESCREVA: "@escrever"
LEIA: "@ler"
E: "and" //nao usado
OU: "or" //nao usado
VAZIO: "null" //nao usado
TIPO_VAZIO: "void"
TIPO_INTEIRO: "int"
TIPO_FLUTUANTE: "float"
TIPO_DOUBLE: "double"
TIPO_STRING: "string"
TIPO_CARACTERE: "char"
TIPO_BOOLEANO: "boolean"


//DELIMITADORES E PONTUADORES
ABRE_PARENTESES: "("
FECHA_PARENTESES: ")"
ABRE_CHAVES: "{"
FECHA_CHAVES: "}"
ABRE_COLCHETES: "["
FECHA_COLCHETES: "]"
PONTO_INTERROGACAO: "?"
PONTO: "." //nao usado
DOIS_PONTOS: ":"
VIRGULA: ","
PONTO_E_VIRGULA: ";"


//FUNCOES E PROGRAMA (IDENTIFICADORES)
FUNCAO_PRINCIPAL: "@principal"
FUNCAO: "@"{IDENTIFICADOR}
RETORNO_FUNCAO: "->"
INICIO: "begin" //não usado
FIM: "end" //não usado
INICIO_FUNC: "beginFunc" //não usado
FIM_FUNC: "EndFunc" //não usado
RETORNO: "return"


//OPERADORES ARITMETICOS
IGUAL_A: "="
SOMA: "+"
SUBTRACAO: "-"
MULTIPLICACAO: "*"
DIVISAO: "/"
MOD: "%"
INCREMENTO: "++"
DECREMENTO: "--"


//OPERADORES RELACIONAIS
MAIOR_QUE: ">"
MENOR_QUE: "<"
IGUAL_IGUAL_A: "=="
DIFERENTE_DE: "!="
MENOR_IGUAL: "<="
MAIOR_IGUAL: ">="


//OPERADORES LOGICOS
AND: "&&"
OR: "||"
NEGADO: "!"
//bool_true    	= ID : "true" //alterado
//bool_false    	= ID : "false" //alterado


//OPERADORES BIT A BIT (BITWISE)
BIT_AND: "&"
BIT_OR: "|"
BIT_XOR: "^"
BIT_NOT: "~"
DESLOC_DIREITA: ">>"
DESLOC_ESQUERDA: "<<"
#NonTerminals
//GERAL/GLOBAL
<PROGRAMA>
<FUNCAO_PRINCIPAL>


//TIPO
<TIPO>
<TIPO_PRIMITIVO>
<DEFINICAO_DO_TIPO>


//EXPRSSOES
<EXP>
<EXP1>
<EXP2>
<EXP3>
<EXP4>
<EXP5>
<EXP6>
<EXP7>
<EXP8>
<EXP9>
<EXP10>
<EXP11>


//INSTRUCOES
<LISTA_DE_INSTRUCOES>
<INSTRUCAO>
<CHAMADA_DE_FUNCAO>


//PARAMETROS
<PARAMETROS>
<VALORES_PARAMETROS>
<VALOR_PARAMETRO>


//VALORES
<VALORES>


//ATRIBUTOS
<ATRIBUTOS>
<ATRIBUTO>


//DIVERSOS
<NOVA_LINHA>
<ESCOPO>


//VETORES
<VETOR>
<VALORES_DO_VETOR>
<INDICE_DO_VETOR>
<TAMANHO_DO_VETOR>


//LACOS DE REPETICAO
<WHILE>
<FACA_ENQUANTO>
<PARA>
<ABRANGENCIA>
<TIPOS_DE_ABRANGENCIA>


//CONDICIONAL
<SE>
<SENAO>
<SENAOSE>
<SENAOSE_UNICO>


//FUNÇOES
<FUNCAO>
<FUNCAO_DEFINIDA>
<FUNCAO_LISTA_PARAM>
<FUNCAO_PARAMETROS>
<FUNCAO_PARAMETRO>


//OPERADORES 
<OPERADOR_RELACIONAL>
<OPERADOR_NEGACIONAL>
<OPERADOR_BITWISE>
<OPERADOR_ARITMETICO_BAIXO>
<OPERADOR_ARITMETICO_ALTO>
#Grammar
//GERAL/GLOBAL
<PROGRAMA> ::= <FUNCAO_PRINCIPAL> | <NOVA_LINHA> <FUNCAO_PRINCIPAL> | <FUNCAO_DEFINIDA> <FUNCAO_PRINCIPAL> | <NOVA_LINHA> <FUNCAO_DEFINIDA> <FUNCAO_PRINCIPAL>;
<FUNCAO_PRINCIPAL> ::= FUNCAO_PRINCIPAL #10 <FUNCAO_LISTA_PARAM> RETORNO_FUNCAO #11 <TIPO> <ESCOPO> <NOVA_LINHA> | FUNCAO_PRINCIPAL #10 <FUNCAO_LISTA_PARAM> RETORNO_FUNCAO <TIPO> #11 <ESCOPO>; 


//TIPOS - primitimo e primitivo vetorizado
<TIPO> ::= <TIPO_PRIMITIVO> | <TIPO_PRIMITIVO> <TAMANHO_DO_VETOR>; //primitivo
<TIPO_PRIMITIVO> ::= TIPO_VAZIO | TIPO_INTEIRO | TIPO_FLUTUANTE | TIPO_DOUBLE | TIPO_STRING | TIPO_CARACTERE | TIPO_BOOLEANO; //ex: "void" ou "int" ou "float" ou "double" ou "string" ou "char" ou "boolean" - valor UNICO
<DEFINICAO_DO_TIPO> ::= INTEIRO | FLOAT | BOOLEAN | BINARIO | HEXADECIMAL | STRING | CHAR; //ex "77" ou "Ola, Mundo!" ou false


//VETORES
<VETOR> ::= VARIAVEL <INDICE_DO_VETOR> | CONSTANTE <INDICE_DO_VETOR>; //ex: "$vetorzinho[5]" ou "&vetorzao[1 + 2]"
<VALORES_DO_VETOR> ::= ABRE_COLCHETES <VALORES> FECHA_COLCHETES;
<INDICE_DO_VETOR> ::= ABRE_COLCHETES <EXP> FECHA_COLCHETES;
<TAMANHO_DO_VETOR> ::= ABRE_COLCHETES INTEIRO FECHA_COLCHETES | ABRE_COLCHETES FECHA_COLCHETES; //ex: "$vetorzinho[2]" ou "$vetrozao[]" - sem tamanho


//CONJUNTO DE EXPRESSOES
<EXP>  ::= <EXP> OR <EXP1> | <EXP1>;
<EXP1> ::= <EXP1> AND <EXP2> | <EXP2>;
<EXP2> ::= <EXP2> BIT_OR <EXP3> | <EXP3>;
<EXP3> ::= <EXP3> BIT_XOR <EXP4> | <EXP4>;
<EXP4> ::= <EXP4> BIT_AND <EXP5> | <EXP5>;
<EXP5> ::= <EXP5> <OPERADOR_RELACIONAL> <EXP6> | <EXP6>;
<EXP6> ::= <EXP6> <OPERADOR_BITWISE> <EXP7> | <EXP7>;
<EXP7> ::= <EXP7> <OPERADOR_ARITMETICO_BAIXO> <EXP8> | <EXP8>;
<EXP8> ::= <EXP8> <OPERADOR_ARITMETICO_ALTO> <EXP9> | <EXP9>;
<EXP9> ::= <OPERADOR_NEGACIONAL> <EXP10> | <EXP10>;
<EXP10> ::= <DEFINICAO_DO_TIPO> | <ATRIBUTO> | <VALORES_DO_VETOR> | <CHAMADA_DE_FUNCAO> | <EXP11>;
<EXP11> ::= ABRE_PARENTESES <EXP> FECHA_PARENTESES;


//DIVERSOS/ESCOPO
<NOVA_LINHA> ::= QUEBRA_LINHA | QUEBRA_LINHA <NOVA_LINHA>; //quebra de linha padrão "/n"
<ESCOPO> ::= ABRE_CHAVES <NOVA_LINHA> <LISTA_DE_INSTRUCOES> FECHA_CHAVES | ABRE_CHAVES <NOVA_LINHA> FECHA_CHAVES; //abertura e fechamento de escopo "{}"


//PARAMETROS - usado na chamada de funcoes
<PARAMETROS> ::= ABRE_PARENTESES <VALORES_PARAMETROS> FECHA_PARENTESES | ABRE_PARENTESES FECHA_PARENTESES; //ex: 7, "Olá, Mundo!", 33 - 100, false
<VALORES_PARAMETROS> ::= <VALOR_PARAMETRO> | <VALOR_PARAMETRO> VIRGULA <VALORES_PARAMETROS>;
<VALOR_PARAMETRO> ::= INTEIRO | FLOAT | STRING | CHAR | BOOLEAN | VARIAVEL;


//VALORES E ATRIBUTOS - são separados por virgula
<VALORES> ::= <EXP> | <EXP> VIRGULA <VALORES>; //ex: 7, "Olá, Mundo!", 33 + 77, false
<ATRIBUTOS> ::= <ATRIBUTO> | <ATRIBUTO> VIRGULA <ATRIBUTOS>; //ex: "$x" ou "$y, &PI, $vetor[1]"
<ATRIBUTO> ::= VARIAVEL | CONSTANTE | <VETOR>; //ex: "$x" ou "&PI" ou "$y[2]" ou "&VETORZINHO[1]"


//INSTRUCOES GERAIS
<LISTA_DE_INSTRUCOES> ::= <INSTRUCAO> <NOVA_LINHA> | <INSTRUCAO> <NOVA_LINHA> <LISTA_DE_INSTRUCOES>; //atribuicoes
<INSTRUCAO> ::= <ATRIBUTOS> | <ATRIBUTOS> IGUAL_A <VALORES>;
<INSTRUCAO> ::= <ATRIBUTO> IGUAL_A <EXP>; //entrada e saida
<INSTRUCAO> ::= <CHAMADA_DE_FUNCAO> | <ATRIBUTO> IGUAL_A <CHAMADA_DE_FUNCAO>;


//ESCRITA E LEITURA
<INSTRUCAO> ::= ESCREVA ABRE_PARENTESES <ATRIBUTO> FECHA_PARENTESES | ESCREVA ABRE_PARENTESES INTEIRO FECHA_PARENTESES; //escrita
<INSTRUCAO> ::= <ATRIBUTO> IGUAL_A LEIA ABRE_PARENTESES FECHA_PARENTESES; //leitura


//LACOS DE REPETICAO
<INSTRUCAO> ::= <WHILE>; //"enquanto"
<INSTRUCAO> ::= <FACA_ENQUANTO>; //"faca enquanto"
<INSTRUCAO> ::= <PARA>; // "para cada, entao"
<WHILE> ::= ENQUANTO ABRE_PARENTESES <EXP> FECHA_PARENTESES <ESCOPO>;
<FACA_ENQUANTO> ::= FACA <ESCOPO> ENQUANTO ABRE_PARENTESES <EXP> FECHA_PARENTESES;
<PARA>  ::=  PARA ABRE_PARENTESES <ABRANGENCIA> FECHA_PARENTESES <ESCOPO>;
<ABRANGENCIA> ::= <ATRIBUTO> IN ABRANGENCIA ABRE_PARENTESES <TIPOS_DE_ABRANGENCIA> FECHA_PARENTESES;
<TIPOS_DE_ABRANGENCIA> ::= INTEIRO | INTEIRO VIRGULA INTEIRO | INTEIRO VIRGULA INTEIRO VIRGULA INTEIRO; //"(1)" ou "(1, 10)" ou "(1, 10, 1)"


//CONDICIONAL
<INSTRUCAO> ::= <SE> | <SE> <SENAO>; //"if" ou "if, else"
<INSTRUCAO> ::= <SE> <SENAOSE>; //"if, elif"
<INSTRUCAO> ::= <SE> <SENAOSE> <SENAO>; //"if, elif, else"
<SE> ::= SE ABRE_PARENTESES <EXP> FECHA_PARENTESES <ESCOPO>; //"if"
<SENAO> ::= SENAO <ESCOPO>; //"else"
<SENAOSE> ::= <SENAOSE_UNICO> | <SENAOSE_UNICO> <SENAOSE>; //"elif" ou "elif, elif"
<SENAOSE_UNICO> ::= SENAOSE ABRE_PARENTESES <EXP> FECHA_PARENTESES <ESCOPO>; //"elif (?) {"


//FUNCOES
<FUNCAO> ::= FUNCAO #10 <FUNCAO_LISTA_PARAM> RETORNO_FUNCAO <TIPO> #11 <ESCOPO> #12 <NOVA_LINHA>;
<FUNCAO_DEFINIDA> ::= <FUNCAO> | <FUNCAO> <FUNCAO_DEFINIDA>;
<FUNCAO_LISTA_PARAM> ::= ABRE_PARENTESES <FUNCAO_PARAMETROS> FECHA_PARENTESES | ABRE_PARENTESES FECHA_PARENTESES; //ex: "$x: float" ou "()"
<FUNCAO_PARAMETROS> ::= <FUNCAO_PARAMETRO> | <FUNCAO_PARAMETRO> VIRGULA <FUNCAO_PARAMETROS>;//ex: "$y: int" ou "$e: float, $d: string, &u: int"
<FUNCAO_PARAMETRO> ::= VARIAVEL DOIS_PONTOS <TIPO> | CONSTANTE DOIS_PONTOS <TIPO>; //ex: "$z: int" ou "&h: boolean"
<CHAMADA_DE_FUNCAO> ::= FUNCAO <PARAMETROS>; //chamada efetiva da funcao
<INSTRUCAO> ::= RETORNO INTEIRO | RETORNO VARIAVEL | RETORNO BOOLEAN | RETORNO BINARIO | RETORNO CHAR | RETORNO STRING | RETORNO HEXADECIMAL | RETORNO BINARIO; //retorno não funciona com múltiplos parâmetros. Ex: "return $a + $b"


//OPERADORES
<OPERADOR_RELACIONAL> ::= MAIOR_QUE | MENOR_QUE | MAIOR_IGUAL | MENOR_IGUAL | IGUAL_IGUAL_A | DIFERENTE_DE; //<, >, >=, <=, ==, !=
<OPERADOR_NEGACIONAL> ::= SUBTRACAO | BIT_NOT | NEGADO; //negados
<OPERADOR_BITWISE> ::= DESLOC_ESQUERDA | DESLOC_DIREITA; //deslocamentos
<OPERADOR_ARITMETICO_BAIXO> ::= SOMA | SUBTRACAO; //mais e menos
<OPERADOR_ARITMETICO_ALTO> ::= MULTIPLICACAO | DIVISAO | MOD; //multipl. divisao e mod
